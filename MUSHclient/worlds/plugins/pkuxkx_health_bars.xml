<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on 2011年 九月 19日 星期一, 上午 7:25 -->
<!-- MuClient version 4.77 -->

<!-- Plugin "pkuxkx_health_bars" generated by Plugin Wizard -->

<muclient>
<plugin
   name="pkuxkx_health_bars"
   author="mygame"
   id="891677381b1fd3d01303b19c"
   language="Lua"
   purpose="Pkuxkx health bars"
   date_written="2011-09-19 07:22:40"
   requires="4.73"
   version="1.0"
   save_state="y"
   >

<description trim="y">

Pkuxkx health bars

</description>
</plugin>
<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   lines_to_match="5"
   match="^【 精神 】\s*(\d+)\s*/\s*(\d+)\s*\[\s*(\d+)%\]\s*【 精力 】\s*(\d+)\s*/\s*(\d+)\s*\(\s*\+\s*(\d+)\)\s*$\n^【 气血 】\s*(\d+)\s*/\s*(\d+)\s*\[\s*(\d+)%\]\s*【 内力 】\s*(\d+)\s*/\s*(\d+)\s*\(\s*\+\s*(\d+)\)\s*$\n^【 食物 】\s*(\d+)\s*/\s*(\d+)\s*\[\S+\]\s*【 潜能 】\s*(\S+)\s*$\n^【 饮水 】\s*(\d+)\s*/\s*(\d+)\s*\[\S+\]\s*【 经验 】\s*(\S+)\s*$\n^【 状态 】\s*(\S+)\s*"
   multi_line="y"
   name="hp_status_name"
   regexp="y"
   script="hp_status_Info"
   sequence="100"
  >
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
<alias
   match="resetaard"
   enabled="y"
   sequence="100"
   ignore_case="y"
   script="reset_aard"
></alias>
</aliases>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Script  -->

<script>
<![CDATA[

require "movewindow"
require "gauge"
require "serialize"

background_colour     = 0x000000
border_color          = 0xcccccc
default_width         = 1137
default_x             = 0
default_y             = 552

local RESIZE_TAG_SIZE = 10
local MIN_WIDTH        = 40
local LEFT_MARGIN     = 10
local TOP_MARGIN      = 5
local stacked = 0
local showLabels = 1
graphicalMode = tonumber(GetVariable("graphicalMode") or 1)
local numBars = 9
local defaultShowBar = {Spirit={"精神:",true,"精神:",0x00ff00,0x004400}, Mana={"精力:",true,"精力:",0x008CFF,0x442200}, Health={"气血:",true,"气血:",0x0000FF,0x442200}, Force={"内力:",true,"内力:",0xFF901E,0x442200}, Food={"食物:",true,"食物:",0xFFFF00,0x000044},Water={"饮水:",true,"饮水:",0x00FFFF,0x000044},Potential={"潜能:",true,"潜能:",0x8CB4D2,0x004400}, Exp={"经验:",true,"经验:",0x8CB4D2,0x00ffff}, Zhuangtai={"状态:",true,"状态:",0x8CB4D2,0x00ffff}}
showBar = defaultShowBar
local barIndex = {"Spirit", "Mana", "Health", "Force", "Food", "Water", "Potential", "Exp", "Zhuangtai"}
-- Variables not saved.
startx     = ""
starty     = ""
posx       = ""
posy       = ""
hotspot_id = ""
page_built = false

-- functions for handling Aardwolf color codes
dofile (GetPluginInfo (GetPluginID(), 20) .. "Pkuxkx_colors.lua")

string.lpad = function(str, len, char)
   str = tostring(str)
   if char == nil then char = ' ' end
   return string.rep(char, len - #str) .. str
end

string.rpad = function(str, len, char)
   str = tostring(str)
   if char == nil then char = ' ' end
   return str .. string.rep(char, len - #str)
end

function reset_aard()
   width = default_width
   font_name = default_font_name
   font_size = default_font_size
   windowinfo.window_left = default_x
   windowinfo.window_top = default_y
   stacked = 0
   OnPluginSaveState()
   OnPluginInstall()
end


function DoNextSimpleBar(bar, val, maxval)
   txt = ""
   if (showBar[bar][2] == true) then
      if showLabels == 1 then
         if stacked == 1 then
            WindowText(win, font_id, showBar[bar][1], xpos,  ypos, 0, 0, showBar[bar][4], false)
         else
            xpos = xpos + WindowText(win, font_id, showBar[bar][3], xpos,  ypos, 0, 0, showBar[bar][4], false)
         end
      end

      if tonumber(maxval) and tonumber(val) then
         if overlay_numbers == 1 or overlay_numbers == 3 then
            maxlen = math.max(#maxval, #val)
            txt = string.lpad(val, maxlen, ' ').."/"..string.rpad(maxval,maxlen,' ')
         end
         if overlay_numbers == 2 or overlay_numbers == 3 then
            txt = txt..((overlay_numbers == 3 and " (") or "")..string.lpad(string.format('%u',100*tonumber(val)/tonumber(maxval)).."%",4,' ')..((overlay_numbers == 3 and ")") or "")
         end
      end

      if graphicalMode == 1 then
	     gauge(win,showBar[bar][3],tonumber(val),tonumber(maxval),xpos+label_width,ypos,bar_width,line_height,showBar[bar][4],0x000000,num_ticks,0x000000,showBar[bar][5],nil,flat_gauges==1)
         if overlay_numbers ~= 0 then
            txtlen = WindowTextWidth(win,font_id,txt)
            ----outlined_text(win, font_id, txt, xpos+label_width+((bar_width-txtlen)/2), ypos, 0, 0, 0xeeeeee, utf8)
			WindowText(win, font_id, " "..txt.." ", xpos+label_width, ypos, 0, 0, ColourNameToRGB("white"), false)
         end
      else
         xpos = xpos + (((stacked == 0) and 1) or 0)*WindowText(win, font_id, " ["..txt.."]", xpos+label_width, ypos, 0, 0, showBar[bar][4], false)
      end

      if stacked == 1 then
         ypos = ypos + line_height + 1
      else
         xpos = xpos+(graphicalMode*bar_width)+LEFT_MARGIN
      end
   end
end

function DoShowtextBar(bar, val)
   txt = ""
   if (showBar[bar][2] == true) then
      if showLabels == 1 then
         if stacked == 1 then
            WindowText(win, font_id, showBar[bar][1], xpos,  ypos, 0, 0, showBar[bar][4], false)
         else
            xpos = xpos + WindowText(win, font_id, showBar[bar][3], xpos,  ypos, 0, 0, showBar[bar][4], false)
         end
      end

      if val then
            txt = string.lpad(val, maxlen, ' ')
      end

      if graphicalMode == 1 then
		 gauge(win,showBar[bar][3],tonumber(val),0,xpos+label_width,ypos,bar_width,line_height,showBar[bar][4],0x000000,num_ticks,0x000000,showBar[bar][5],nil,flat_gauges==1)
         txtlen = WindowTextWidth(win,font_id,txt)
        ---- outlined_text(win, font_id, txt, xpos+label_width+((bar_width-txtlen)/2), ypos, 0, 0, 0xeeeeee, utf8)
		WindowText(win, font_id, " "..txt.." ", xpos+label_width, ypos, 0, 0, ColourNameToRGB("white"), false)
      else
         xpos = xpos + (((stacked == 0) and 1) or 0)*WindowText(win, font_id, " ["..txt.."]", xpos+label_width, ypos, 0, 0, showBar[bar][4], false)
      end

      if stacked == 1 then
         ypos = ypos + line_height + 1
      else
         xpos = xpos+(graphicalMode*bar_width)+LEFT_MARGIN
      end
   end
end

function DisplayStatsPage()

   WindowRectOp(win, 2, 2,2,-2,-2,background_colour) -- blank

   if not page_built then
      local txt = "这里将显示状态条  输入:: HP ::获取信息."
      local txtlen = WindowTextWidth(win,font_id,txt)
      WindowText (win, font_id, txt, (width-txtlen)/2, 6, 0, 0, 0xeeeeee, false)
   else -- Only draw bars if we have data.

      local barTexts = ""
      ypos = TOP_MARGIN
      xpos = LEFT_MARGIN
      label_width = 0
      bar_width = 0
      num_ticks = 3
      if overlay_numbers ~= 0 then
         num_ticks = 0
      end

      -- count up the bars we're going to use

      if stacked == 1 then
         if showLabels == 1 then
            label_width = WindowTextWidth(win,font_id,"WWWW:")
         end
         bar_width = math.max(1, width-label_width-LEFT_MARGIN*2)
      else
         for i,v in pairs(showBar) do
            if (v[2] == true) then
               barTexts = barTexts..v[3]
            end
         end
         if showLabels == 1 then
            bar_width = math.max(1, (width-WindowTextWidth(win, font_id, barTexts)-LEFT_MARGIN)/numBars-LEFT_MARGIN)
         else
            bar_width = math.max(1, (width-LEFT_MARGIN)/numBars-LEFT_MARGIN)
         end
      end

      DoNextSimpleBar("Spirit", StatusValue[1] or "", StatusValue[2] or "")

      DoNextSimpleBar("Mana", StatusValue[4] or "", StatusValue[5] or "")

      DoNextSimpleBar("Health", StatusValue[7] or "", StatusValue[8] or "")

	  DoNextSimpleBar("Force", StatusValue[10] or "", StatusValue[11] or "")

	  DoNextSimpleBar("Food", StatusValue[13] or "", StatusValue[14] or "")

	  DoNextSimpleBar("Water", StatusValue[16] or "", StatusValue[17] or "")

      DoShowtextBar("Potential", StatusValue[15] or "")

	  DoShowtextBar("Exp", StatusValue[18] or "")

	  DoShowtextBar("Zhuangtai", StatusValue[19] or "")

   end

   -- draw the resize widget bottom right corner.
   WindowLine(win, width-3, height-2, width-2, height-3, 0xffffff, 0, 2)
   WindowLine(win, width-4, height-2, width-2, height-4, 0x696969, 0, 1)
   WindowLine(win, width-6, height-2, width-2, height-6, 0xffffff, 0, 2)
   WindowLine(win, width-7, height-2, width-2, height-7, 0x696969, 0, 1)
   WindowLine(win, width-9, height-2, width-2, height-9, 0xffffff, 0, 2)
   WindowLine(win, width-10, height-2, width-2, height-10, 0x696969, 0, 1)
   WindowLine(win, width-12, height-2, width-2, height-12, 0xffffff, 0, 2)
   WindowLine(win, width-13, height-2, width-2, height-13, 0x696969, 0, 1)

   Repaint()
end -- DisplayStatsPage

--=================================================================================
-- functions hp_status_Info
--=================================================================================
StatusValue = {}
hp_status_Info = function(name, line, wildcards)
	StatusValue=wildcards
	page_built = true
	DisplayStatsPage()
end

--=================================================================================
-- right click menu
--=================================================================================
function right_click_menu ()
   menustring ="!更改字体|"
   if showLabels == 1 then
      menustring = menustring.."隐藏标签|"
   else
      menustring = menustring.."显示标签|"
   end
   if stacked == 1 then
      menustring = menustring.."横排显示|"
   else
      menustring = menustring.."竖排显示|"
   end
   local activeBars = ""
   for i,v in ipairs(barIndex) do
      if (showBar[v][2] == true) then
         activeBars = activeBars.."+"..v.."|"
      else
         activeBars = activeBars..""..v.."|"
      end
   end
   menustring = menustring .. ">激活/关闭|"..activeBars.."<|"
   menustring = menustring .. ">设置颜色|>精神|边框|柱条|<|>精力|边框|柱条|<|>气血|边框|柱条|<|>内力|边框|柱条|<|>食物|边框|柱条|<|>饮水|边框|柱条|<|<|-|"..((graphicalMode==0 and "+") or "").."文本模式|"..((flat_gauges==1 and "+") or "").."使用平面柱图|>显示数字|"..((overlay_numbers==0 and "+") or "").."无|"..((overlay_numbers==1 and "+") or "").."标准|"..((overlay_numbers==2 and "+") or "").."百分比|"..((overlay_numbers==3 and "+") or "").."标准+百分比|<|-|上移一层|下移一层|-|>(在紧急情况下)|减少大小|<|"

   result = WindowMenu (win,
      WindowInfo (win, 14),  -- x position
      WindowInfo (win, 15),   -- y position
      menustring) -- content
   if result ~= "" then
      numResult = tonumber(result)
      if numResult == 1 then
         -- change font
         wanted_font = utils.fontpicker (font_name, font_size) --font dialog
         if wanted_font then
            font_name = wanted_font.name
            font_size = wanted_font.size
         end
      elseif numResult == 2 then
         -- show/hide labels
         showLabels = (((showLabels == 0) and 1) or 0)
      elseif numResult == 3 then
         -- stack/unstack bars
         if stacked == 1 then
            stacked = 0
            height = line_height+(TOP_MARGIN*2)
         else
            stacked = 1
            height = ((line_height+1)*numBars)+(TOP_MARGIN*2)
         end
      elseif numResult >= 4 and numResult <= 12 then
         -- activate/de-activate
         showBar[barIndex[numResult-3]][2] = not showBar[barIndex[numResult-3]][2]
      elseif numResult >= 13 and numResult <= 24 then
         -- change colors
         local colourIndex = 4
         if (numResult % 2 == 1) then
            colourIndex = 5
         end
         local newcolour = PickColour (showBar[barIndex[math.ceil((numResult-12)/2)]][colourIndex])
         if newcolour ~= -1 then
            showBar[barIndex[math.ceil((numResult-12)/2)]][colourIndex] = newcolour
         end
      elseif numResult == 25 then
         -- text mode
         graphicalMode = (((graphicalMode == 0) and 1) or 0)
      elseif numResult == 26 then
         flat_gauges = (((flat_gauges == 0) and 1) or 0)
      elseif numResult == 27 then
         overlay_numbers = 0
      elseif numResult == 28 then
         overlay_numbers = 1
      elseif numResult == 29 then
         overlay_numbers = 2
      elseif numResult == 30 then
         overlay_numbers = 3
      elseif numResult == 31 then
         -- bring to front
         CallPlugin("462b665ecb569efbf261422f","boostMe", win)
      elseif numResult == 32 then
         -- send to back
         CallPlugin("462b665ecb569efbf261422f","dropMe", win)
      elseif numResult == 33 then
         -- reduce size
         font_name = default_font_name
         font_size = default_font_size
         numBars = 5
         height = ((line_height+1)*numBars)+(TOP_MARGIN*2)
         width = default_width
         stacked = 1
         showLabels = 1
         showBar = defaultShowBar
      end -- if
      OnPluginSaveState()
      OnPluginInstall()
   end
end -- right_click_menu

--=================================================================================
-- Called when plugin receives telnet data - main entry point for actually running
-- the plugin.
--=================================================================================
function OnPluginBroadcast (msg, id, name, text)
  if (id == "462b665ecb569efbf261422f" and msg==996 and text == "re-register z") then
      CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win)
   end
end

---------------------------------------------------------------------------------
-- Called as the window is dragged around. This function and those below are
-- only 'handlers' because they are set in WindowAddHotSpot
---------------------------------------------------------------------------------
function ResizeMoveCallback()

   posx, posy = WindowInfo (win, 17), WindowInfo (win, 18)
   width = width + posx - startx
   startx = posx
   if (width < MIN_WIDTH) then
      width = MIN_WIDTH
      startx = windowinfo.window_left+width
   elseif (windowinfo.window_left+width > GetInfo(281)) then
      width = GetInfo(281)-windowinfo.window_left
      startx = GetInfo(281)
   end

   SetUpHotspotsAndDraw(false)
end

---------------------------------------------------------------------------------
-- Called after the resize widget is released.
---------------------------------------------------------------------------------
function ResizeReleaseCallback()
   orig_width = 0
   SetUpHotspotsAndDraw(false)
end

---------------------------------------------------------------------------------
-- Called when mouse button is pressed on hotspot.
---------------------------------------------------------------------------------
function MouseDown(flags, hotspot_id)
   if (hotspot_id == "resize") then
      startx, starty = WindowInfo (win, 17), WindowInfo (win, 18)
   end
end

---------------------------------------------------------------------------------
-- Called when mouse moved away from hotspot. Doesn't really apply for draggables.
---------------------------------------------------------------------------------
function CancelMouseDown(flags, hotspot_id)
end

---------------------------------------------------------------------------------
-- Called when mouse button released on hotspot.
---------------------------------------------------------------------------------
function MouseUp(flags, hotspot_id, win)
   if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      right_click_menu()
   end
   return true
end

function LeftClickOnly(flags, hotspot_id, win)
   if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      return true
   end
   return false
end

---------------------------------------------------------------------------------
-- Called when plugin is saved - store our variables for next time.
---------------------------------------------------------------------------------
function OnPluginSaveState ()
   -- save window current location for next time
   movewindow.save_state (win)
   barTexts = ""
   numBars = 0
   for i,v in pairs(showBar) do
      if (v[2] == true) then
         barTexts = barTexts..v[3]
         numBars = numBars+1
      end
   end
   SetVariable ("stacked", stacked)
   SetVariable ("showLabels", showLabels)
   SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
   SetVariable ("background_colour", background_colour)
   SetVariable ("width", (((orig_width ~= 0) and orig_width) or width))
   SetVariable ("height", height)
   SetVariable ("font_name", font_name)
   SetVariable ("font_size", font_size)
   SetVariable ("numBars", numBars)
   SetVariable ("showBar", serialize.save ("showBar"))
   SetVariable ("graphicalMode", graphicalMode)
   SetVariable ("flat_gauges", flat_gauges)
   SetVariable ("overlay_numbers", overlay_numbers)
end -- OnPluginSaveState

function OnPluginClose()
   OnPluginDisable()
end

function OnPluginDisable ()
   OnPluginSaveState()
   WindowShow( win, false )
end --  OnPluginDisable

function OnPluginEnable ()
   WindowShow (win, true)
   OnPluginSaveState()
end -- OnPluginEnable


win = GetPluginID()
require "checkplugin"
function OnPluginListChanged ()
   do_plugin_check_now ("462b665ecb569efbf261422f", "Pkuxkx_mw_z_order_monitor") -- check we have z order plugin
end -- OnPluginListChanged

orig_width = 0
function OnPluginWorldOutputResized()
   if installed == true then
      orig_width = math.max(width, orig_width)
      width = math.min(orig_width, GetInfo(281)-windowinfo.window_left)
      SetUpHotspotsAndDraw(false)
   end
end

function OnPluginInstall()
   background_colour = tonumber (GetVariable ("background_colour")) or background_colour
   -- make window so I can grab the font info
   WindowCreate (win, 600, 600, 1, 1, 0, 0, background_colour)

   font_id = "statmon_font"

   local fonts = utils.getfontfamilies ()

   if fonts["宋体"] then
      default_font_size = 8
      default_font_name = "宋体"
   elseif fonts["FixedSys"] then
      default_font_size = 8
      default_font_name = "FixedSys"
   elseif fonts ["Courier New"] then
      default_font_size = 8
      default_font_name = "Courier New" -- the actual font
   else
      default_font_size = 8
      default_font_name = "Lucida Console"
   end -- if


   font_name = GetVariable("font_name") or default_font_name
   font_size = tonumber(GetVariable("font_size")) or default_font_size

   --- Load the fonts into the temp window.
   WindowFont (win, font_id, font_name, font_size, false, false, false, false) -- normal font

   --- Grab font size settings.
   font_height = WindowFontInfo (win, font_id, 1) -  WindowFontInfo (win, font_id, 4) + 1 -- height
   font_width  = WindowFontInfo (win, font_id, 6)  -- avg width
   line_height = font_height + 1

   --- install the window movement handler, get back the window position.
   windowinfo  = movewindow.install (win, miniwin.pos_top_right, miniwin.create_absolute_location, false, nil, {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly},{x=default_x, y=default_y})

   MIN_WIDTH = math.max(40, WindowTextWidth(win, font_id, "WWWW:")+LEFT_MARGIN*2)

   width      = tonumber(GetVariable("width")) or default_width
   stacked    = tonumber(GetVariable("stacked")) or stacked
   showLabels = tonumber(GetVariable("showLabels")) or showLabels
   numBars    = tonumber(GetVariable("numBars")) or numBars
   flat_gauges = tonumber(GetVariable("flat_gauges")) or 0
   overlay_numbers = tonumber (GetVariable("overlay_numbers")) or 1
   showBar = defaultShowBar
   assert (loadstring (GetVariable ("showBar") or "")) ()

   barTexts = ""
   for i,v in pairs(showBar) do
      if (v[2] == true) then
         barTexts = barTexts..v[3]
      end
   end
   if stacked == 1 then
      height = (TOP_MARGIN*2)+(numBars*(line_height+1))
   else
      if showLabels == 1 then
         MIN_WIDTH = math.max(40, WindowTextWidth(win, font_id, barTexts)+LEFT_MARGIN*2)
      end
      height = TOP_MARGIN*2 + line_height
   end
   width = math.max(width, MIN_WIDTH)

   --- Setup the window.
   SetUpHotspotsAndDraw(true)

   -- if disabled last time, stay disabled
   if GetVariable ("enabled") == "false" then
      ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
      check (EnablePlugin(GetPluginID (), false))
      return
   end -- they didn't enable us last time

   OnPluginSaveState()
   installed = true
end

--=================================================================================
-- Called by OnPluginInstall, but also by redraw routine to refresh the screen
-- and (if the first time) add the resizer tag, otherwise move the resizer relative
-- to the main window.
--=================================================================================
function SetUpHotspotsAndDraw(firstTime)
   if (firstTime == true) then
      check (WindowCreate (win,
            windowinfo.window_left, windowinfo.window_top,   -- left, top (auto-positions)
            width,     -- width
            height,  -- height
            windowinfo.window_mode,       -- auto-position: middle right
            windowinfo.window_flags,  -- flags
            background_colour) )
      -- Add handler for resizing
      WindowAddHotspot(win, "resize", width-RESIZE_TAG_SIZE, height-RESIZE_TAG_SIZE, width, height, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 6, 0)
      WindowDragHandler(win, "resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)
      CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win)
      WindowShow (win, true)
   else
      -- everything has already been made
      -- just move them back into place
      WindowResize(win, width, height, background_colour)
      WindowMoveHotspot(win, "resize", width-RESIZE_TAG_SIZE, height-RESIZE_TAG_SIZE, width, height)
   end

   -- Add the drag handler so they can move the window around
   movewindow.add_drag_handler (win, 0, 0, 0, 0)

   -- draw edge frame.
   WindowRectOp (win, 1, 0, 0, 0, 0, border_color, 15)
   WindowRectOp (win, 1, 1, 1, -1, -1, 0x777777, 15)

   DisplayStatsPage()
end

-------------------------------------------------------------------------------
--- Calculate width of a line of styled text without drawing it.
-------------------------------------------------------------------------------
function styleWidth(styles)
   local s = ""
   for _,w in ipairs (styles) do
      s = s .. w.text
   end
   return WindowTextWidth(win,font_id,s)
end -- styleWidth

]]>
</script>


</muclient>
